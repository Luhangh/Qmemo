package com.luch.qmemo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.luch.qmemo.entity.Income;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INCOME".
*/
public class IncomeDao extends AbstractDao<Income, Long> {

    public static final String TABLENAME = "INCOME";

    /**
     * Properties of entity Income.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Amount = new Property(2, String.class, "amount", false, "AMOUNT");
        public final static Property Channel = new Property(3, String.class, "channel", false, "CHANNEL");
        public final static Property CreateTime = new Property(4, String.class, "createTime", false, "CREATE_TIME");
        public final static Property MotifyTime = new Property(5, String.class, "motifyTime", false, "MOTIFY_TIME");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
    }


    public IncomeDao(DaoConfig config) {
        super(config);
    }
    
    public IncomeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INCOME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"AMOUNT\" TEXT," + // 2: amount
                "\"CHANNEL\" TEXT," + // 3: channel
                "\"CREATE_TIME\" TEXT," + // 4: createTime
                "\"MOTIFY_TIME\" TEXT," + // 5: motifyTime
                "\"REMARK\" TEXT);"); // 6: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INCOME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Income entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(3, amount);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(4, channel);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String motifyTime = entity.getMotifyTime();
        if (motifyTime != null) {
            stmt.bindString(6, motifyTime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Income entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(3, amount);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(4, channel);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String motifyTime = entity.getMotifyTime();
        if (motifyTime != null) {
            stmt.bindString(6, motifyTime);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Income readEntity(Cursor cursor, int offset) {
        Income entity = new Income( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // amount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // channel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // motifyTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Income entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAmount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChannel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMotifyTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Income entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Income entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Income entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
